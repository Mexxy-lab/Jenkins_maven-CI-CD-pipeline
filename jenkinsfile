pipeline{
    //agent any
    agent {label 'UX_Pumejprod'}
    environment{
           name = "Mexy_Pumej-Lab"
           project_description = "Maven_Jenkins pipeline project - testing phase"
    }
    parameters {
              choice(name: 'BranchName', choices: ['main', 'feature-pumej'], description: 'Pick a Branch')
    }
    stages{

    stage('Git checkout'){
        steps{
            echo "git checkout"
            git branch: 'feature-pumej', changelog: false, credentialsId: 'testpipelinepwd', poll: false, url: 'https://github.com/IBT-learning/ibt-maven.git'
        }
    }
    stage('Test'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn test'
            }
        }
    }
    stage('Validate'){
        steps{
            withMaven(maven: 'maven_3.8') {
                sh 'mvn validate'
                }
           }
        }
    stage('Compile'){
         steps{
             withMaven(maven: 'maven_3.8') {
                 sh 'mvn compile'
                 }
             }
         }
    stage ('Sonarqube Analysis') {
     	    environment {
     		sonarScan = tool 'ibt-sonarqube'
            }
            steps {
     	        withSonarQubeEnv(credentialsId: 'student-sonar-token2', installationName: 'ibt-sonarqube') {
     	        //sh "${mvn}/bin/mvn clean verify sonar:sonar -Dsonar.projectKey=July_cohort"
     	        sh "${env.sonarScan}/bin/sonar-scanner"
     		    }
     	    }
    }
    stage('Package'){
          steps{
              withMaven(maven: 'maven_3.8') {
                    sh 'mvn package'
                   }
              }
          }
    stage('Vulnerability scan - Dependency Check') {
          steps{
                dependencyCheck additionalArguments: '''
                                           -o "./"
                                           -s "./"
                                           -f "ALL"
                                           --prettyPrint ''', odcInstallation: 'dependency-check'
                                           dependencyCheckPublisher pattern: 'dependency-check-report.xml'
                }
          }
          stage('Deploy'){
                steps{
                    withMaven(maven: 'maven_3.8') {
                    withCredentials([file(credentialsId: 'settingsxml_pumej', variable: 'settingsxml_pumej')]) {
                        sh 'mvn deploy -s $settingsxml_pumej'
                        }
                    }
                }
          }
          //stage('Deploy with Config file'){
                //steps{
                    //withMaven(maven: 'maven_3.8') {
                    //configFileProvider([configFile(fileId: 'artifactory-settings', variable: 'settingsxml_managed')]) {
                        //sh 'mvn deploy -s $settingsxml_managed'
                        //}
                    //}
                //}
          //}
          stage('Deploy to Dev (cloud) server') {
                    steps{
                            script{
                                        def remote = [name: 'pumej-dev', host: '164.92.88.219', allowAnyHosts: true]
                                        withCredentials([usernamePassword(credentialsId: 'pumej_dev_serverpwd', passwordVariable: 'password', usernameVariable: 'username')]){
                                        remote.user = username
                                        remote.password = password
                                        sshPut remote: remote, from: 'target/pumej-app-1.9.5-SNAPSHOT.jar' , into: '/opt/tomcat/webapps'
                                        }
                            }
                    }
          }
          stage('deployment approvalRequest'){
                 steps{
                        input id: 'DeploymentApprovalReq', message: 'Requesting approval for Deployment???', ok: 'Approved', parameters: [password(defaultValue: 'pumej', description: 'pumejapproval', name: 'pumejLab')], submitter: 'Gunjan', submitterParameter: 'pumej'
                 }
          }
          stage('Deploy to Dev (cloud) Prod server') {
                    steps{
                            script{
                                         def remote = [name: 'pumej-devprod', host: '143.198.79.195', allowAnyHosts: true]
                                         withCredentials([usernamePassword(credentialsId: 'pumej_dev_serverpwd', passwordVariable: 'password', usernameVariable: 'username')]){
                                         remote.user = username
                                         remote.password = password
                                         sshPut remote: remote, from: 'target/pumej-app-1.9.5-SNAPSHOT.jar' , into: '/opt/tomcat/webapps'
                                     }
                            }
                    }
          }
    }
    post
    {
          always {
                   echo 'This is the end of the PIPELINE!!! PROJECT WAS SUCCESSFUL'
                   echo 'Testing Approval and Deploy to Cloud server!!!'
                   echo 'Final Test project for local server upload'
                   echo 'Testing Approval request'
          }
    }
}